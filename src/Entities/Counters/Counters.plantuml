@startuml

title __COUNTERS's Class Diagram__\n

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Albali {
          {static} + CLOAK_POSX : int
          {static} + CLOAK_POSY : int
          - ROUNDS_AFFECTED : int
          - ULT_LOAD : int
          - first : boolean
          - resetOn : int
          - uses : int
          + Albali()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      abstract class Entities.Counters.Counter {
          {static} + DEFAULT_HEIGHT : int
          {static} + DEFAULT_WIDTH : int
          # ANIM_TICKS : int
          # SCALE : double
          # canKill : boolean
          # cfinished : boolean
          # cisinbase : boolean
          # counterColor : BufferedImage
          # directionx : double
          # directiony : double
          # hitbox : Rectangle
          # killable : boolean
          # moved : int
          # ultBar : boolean
          # ultimateAbility : boolean
          # vulnerable : boolean
          - basex : float
          - basey : float
          - beaten : boolean
          - moving : boolean
          - reseting : boolean
          - tickcount : int
          - won : boolean
          + Counter()
          + canKill()
          + cfinished()
          + didCFinish()
          + getBaseX()
          + getBaseY()
          + getCounterColor()
          + getMoving()
          + getReseting()
          + getUltimateBar()
          + getWon()
          + hasUltBar()
          {abstract} + ifStepped()
          + isBeaten()
          + isClicked()
          + isInbase()
          + isKillable()
          + isMoving()
          + isVulnerable()
          + renderBig()
          + renderBig()
          + renderSmall()
          + renderUltBar()
          + resetToBase()
          + setMoving()
          + setUltimateAbility()
          + tick()
          + useUltimateAbility()
          {abstract} # counterLogic()
          # getNextPosition()
          - moveLogic()
          - resetLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Funi {
          {static} + FIRE_ROUNDS : int
          {static} + WAND_POSX : int
          {static} + WAND_POSY : int
          - ULT_LOAD : int
          - WAND_HEIGHT : int
          - WAND_WIDTH : int
          - fireTile : Tile[]
          + Funi()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Intan {
          {static} + SHIELD_POSX : int
          {static} + SHIELD_POSY : int
          - hasShield : boolean
          + Intan()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Lich {
          # ULT_LOAD : int
          + Lich()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Mira {
          {static} + MEDKIT_POSX : int
          {static} + MEDKIT_POSY : int
          - ULT_LOAD : int
          + Mira()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Polaris {
          {static} + ARMORF_X : int
          {static} + ARMORF_Y : int
          {static} - ARMORB_X : int
          {static} - ARMORB_Y : int
          - armorLvl : int
          - first : boolean
          - hasArmor : boolean
          + Polaris()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Samaya {
          {static} + SWAN_X : int
          {static} + SWAN_Y : int
          + Samaya()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Saph {
          {static} + SWORD_POSY : int
          - TILES_AFFECTED : int
          {static} - ULT_LOAD : int
          - uses : int
          + Saph()
          + ifStepped()
          + render()
          # counterLogic()
      }
    }
  }
  

  namespace Entities {
    namespace Counters {
      class Entities.Counters.Venator {
          {static} + BOWR_FX : int
          {static} + BOWR_FY : int
          {static} - BOWL_BX : int
          {static} - BOWL_BY : int
          {static} - BOWL_FX : int
          {static} - BOWL_FY : int
          {static} - BOWR_BX : int
          {static} - BOWR_BY : int
          - ULT_LOAD : int
          - velocity : double
          + Venator()
          + ifStepped()
          + render()
          # counterLogic()
          - arrowTick()
      }
    }
  }
  

  Entities.Counters.Albali -up-|> Entities.Counters.Counter
  Entities.Counters.Counter -up-|> Entities.Entity
  Entities.Counters.Counter o-- Entities.PositionOnMap : pos
  Entities.Counters.Counter o-- Entities.HUD.UltimateBar : ultimateBar
  Entities.Counters.Counter o-- Entities.PositionOnMap : bufferedPosition
  Entities.Counters.Funi -up-|> Entities.Counters.Counter
  Entities.Counters.Intan -up-|> Entities.Counters.Counter
  Entities.Counters.Lich -up-|> Entities.Counters.Counter
  Entities.Counters.Mira -up-|> Entities.Counters.Counter
  Entities.Counters.Polaris -up-|> Entities.Counters.Counter
  Entities.Counters.Samaya -up-|> Entities.Counters.Counter
  Entities.Counters.Saph -up-|> Entities.Counters.Counter
  Entities.Counters.Venator -up-|> Entities.Counters.Counter


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
